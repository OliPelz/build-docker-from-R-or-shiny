import re
# this script creates all-in-one dependency resolution strings for R projects to be used in Dockerfiles or pure command line
# useful for dockerizations of R / shiny projects
# see github.com/xxxx  for a useful example

# it needs two input files:

# param 1: a file generated by the output of the following bash commands done in a R project folder to resolve all included libraries
# this line does not only include packages using library() lines but also
# finds additional packages based on function calls -- some functions are called with their static package name without a
# library line before: e.g. d3heatmap::scale()

# find <path to R project> -iname "*.[rR]" -exec grep "library(" {} \; | grep -v "#" | sort | uniq |sed 's/^library(\([a-zA-Z0-9\.]*\))$/\1/g' > ./r-debs-tmp.txt
# find <path to R project> -iname "*.[rR]" -exec grep -o "[0-9a-zA-Z]*::[0-9a-zA-Z]*(" {} \; | grep  -o "^[0-9a-zA-Z]*" |  sort | uniq > ./r-debs-tmp2.txt
# cat r-debs-tmp.txt r-debs-tmp2.txt | sort | uniq > ./r-debs.txt
# e.g.
# find ../../../caR-devel/caRpools_devel/ -iname "*.[rR]" -exec grep "library(" {} \; | grep -v "#" | sort | uniq | sed 's/^library(\([a-zA-Z0-9\.]*\))$/\1/g' > ./r-debs-tmp.txt
# find ../../../caR-devel/caRpools_devel/ -iname "*.[rR]" -exec grep -o "[0-9a-zA-Z_-]*::[0-9a-zA-Z_-]*(" {} \; | grep  -o "^[0-9a-zA-Z]*" |  sort | uniq > ./r-debs-tmp2.txt
# cat r-debs-tmp.txt r-debs-tmp2.txt | sort | uniq > ./r-debs.txt
# 
#
#
# param 2: a file generated by the following R command (you need to make sure that this R version can run your R application you want to dockerize)
# to get exact versions of all our R packages along their source of installation (e.g. github.com, CRAN, Bioconductor)
# remember, you can dockerize everything, in our example we use a shiny webapp
# first load all packages you will need for this app, then use devtools::source_info()
#
# awk '{print "library("$1")"}' ./r-debs.txt > /tmp/libs.R; echo "devtools::session_info();" >> /tmp/libs.R;
# R -e 'source("/tmp/libs.R")' > sessionInfo.txt


# param 3: the name of the repo where the dep can be found

# example script call: python build-dep-list-docker.py r-debs.txt sessionInfo.txt "file:///tmp/std_repo" 

import re,sys

# first create datastructs to keep installed packages versions and source (e.g. github.com, cran, bioconductor)

if len(sys.argv) != 4:
  print "example script call: ./build-dep-list-docker.py r-debs.txt sessionInfo.txt file:///tmp/std_repo"
  quit()

actualRLibs = sys.argv[1]
depFile = sys.argv[2]
repo = sys.argv[3]


# first read in the list of packages wich are actually used by the R project of choice
actualRPkgs = {}
with open(actualRLibs) as fp:
    for line in fp:
      actualRPkgs[line.strip()] = 1


cran = {}
bioconductor = {}
github = {}

# now read in sessioninfo file which contains version numbers etc.
with open(depFile) as fp:
    # skip first line
    next(fp)
    for line in fp:
       line = line.strip()
       searchObj = re.match( r'([\w\.]+)\s+\**\s*([\d\.-]+)\s+([\d-]+)\s+(\w+)\s*([\w\(\)\.@\s/]*)', line)
       if not searchObj: 
          print "the following line is not parsable which is a bug, bailing out ...'" + line + "'"
          quit()
       package    = searchObj.group(1)
       version    = searchObj.group(2)
       origin     = searchObj.group(4)
       githubLink = searchObj.group(5)
       
       cur_ref = None
       if re.search("CRAN", origin, re.IGNORECASE):
         cur_ref = cran
       elif re.search("Bioconductor", origin):
         cur_ref = bioconductor
       elif re.search("Github", origin):
         cur_ref = github
         m=re.match("\(([\/\w]+)@*(\w*)\)", githubLink)
         if m:
          githubLink=m.group(1)
          package = githubLink.split("/")[1]
          if m.group(2) and m.group(2) != '':
             version = m.group(2)
          # do check
          if version == None or version == "":
            print "could not extract version from github repos link...bailing out"
            quit()
       else:
         print "no valid package type cran|bioconductor|github found for package " + package + ", bailing out..."
         quit()

       # check for uniqness of package in file
       if package in cur_ref:
         print "package name " + package + "is not unique in file " + depFile
       cur_ref[package]= {}
       cur_ref[package]["version"] = version
       if githubLink: 
          cur_ref[package]["githubLink"] = githubLink

# create a consistence test first
bailout = False
for pckg in actualRPkgs:
   if not pckg in cran and not pckg in bioconductor and not pckg in github:
     print "actual R package '" + pckg + "' found in R project source but cannot be found in sessioninfo which should be treated as error"
     bailout = True
if bailout:
  quit()


# now to the actual print out

for package in actualRPkgs:
# generate packages installation string for cran
   if package in cran:
     version = cran[package]["version"]
     print "RUN R -e 'devtools::install_version(\"" + package +"\", version = \"" + version + "\", repos = \"" + repo + "\")'"
 # generate packages installation string for bioconductor...how to install specific version?
   elif package in bioconductor:
     print "RUN R -e 'source(\"http://bioconductor.org/biocLite.R\");biocLite();biocLite(\"" + package +"\")'"
# packages from github
   elif package in github:
     version = github[package]["version"]
     githubLink = github[package]["githubLink"]
     print "RUN R -e 'devtools::install_github(\"" + githubLink+ "\", ref = \"" + version+ "\")'"
